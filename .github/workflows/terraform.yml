name: 'Terragrunt GitHub Actions'
on:
  push:
  pull_request:
    branches:
      - master

env:
  tf_version: '1.10.5'
  tg_version: '0.73.12'
  working_dir: 'terraform'
  tg_add_approve: true

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: Check terragrunt HCL
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'hclfmt --check --diff'

  validate_token:
    runs-on: ubuntu-latest
    needs: [ checks ]
    steps:
      - name: 'Validate Cloudflare API Token'
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X GET "https://api.cloudflare.com/client/v4/user/tokens/verify" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json")
          if [[ "$RESPONSE" -ne 200 ]]; then
            echo "❌ Cloudflare API token is invalid!"
            exit 1
          else
            echo "✅ Cloudflare API token is valid."
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.TF_VAR_CLOUDFLARE_API_TOKEN }}

  plan:
    runs-on: ubuntu-latest
    needs: [ validate_token ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'run-all plan'
        env:
          TF_VAR_cloudflare_zone_id: ${{ secrets.TF_VAR_CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.TF_VAR_CLOUDFLARE_API_TOKEN }} 
          TF_VAR_STATE_BUCKET: ${{ secrets.TF_VAR_STATE_BUCKET }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ plan ]
    environment: 'prod'
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_add_approve: ${{ env.tg_add_approve }}
          tg_command: 'run-all apply'
        env:
          TF_VAR_cloudflare_zone_id: ${{ secrets.TF_VAR_CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.TF_VAR_CLOUDFLARE_API_TOKEN }} 
          TF_VAR_STATE_BUCKET: ${{ secrets.TF_VAR_STATE_BUCKET }}